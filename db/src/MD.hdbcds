using Core as EPM;
using Util;


context MD {

Type HistT {
        CREATEDBY : Association to Employees;
        CREATEDAT : EPM.SDate;
        CHANGEDBY : Association to Employees;
        CHANGEDAT : EPM.SDate; 
    };
    
 Type NameT {
        FIRST : EPM.SString;
        MIDDLE : EPM.SString;
        LAST : EPM.SString;
        INITIALS : EPM.BusinessKey;
      };
 type SexT : String(1);
 
    Entity Addresses {
        key  ADDRESSID: EPM.BusinessKey;
        CITY: EPM.SString;
        POSTALCODE: EPM.BusinessKey;
        STREET: EPM.MString;
        BUILDING: EPM.BusinessKey;
        COUNTRY: String(3);
        REGION: String(4);
        ADDRESSTYPE: String(2);
        VALIDITY: EPM.ValidityT;   
        LATITUDE: Double;
        LONGITUDE: Double; 
		POINT: hana.ST_POINT;        
    } technical configuration {
    	unload priority 8;
    };
    
    Entity BusinessPartner {
        key  PARTNERID: EPM.BusinessKey;
        PARTNERROLE: String(3); //Business Partner Role
        EMAILADDRESS: EPM.LString;
        PHONENUMBER: EPM.PhoneT;
        FAXNUMBER: EPM.PhoneT null;
        WEBADDRESS: EPM.VLString;
        ADDRESSES: Association to Addresses null;
        COMPANYNAME: String(80);
        LEGALFORM: EPM.BusinessKey;
        HISTORY: HistT;
        CURRENCY: EPM.CurrencyT;
    } technical configuration {
    	partition by HASH  (PARTNERID) Partitions GET_NUM_SERVERS();
    };
    //START CODE 21DEC2019 
    //MODIFYING IN ORDER TO CREATE NEW "CONTACT" TABLE AND "EMAIL" TABLE FOR EXERCISE HA300.
    // THE TABLES LOAD DATA FROM THE Contact.csv and Email.csv files present in the Loads folder.
    // Import table data settings were changed in the "MasterData.hdbtabledata" JSON file present in the Loads folder.
    // THESE TABLES WILL BE USED WHILE CREATION OF CV'S IN EXERCISES 2 AND 3.
    // ALL THE BELOW CHANGES ARE PART OF INITIAL COMMIT.
 entity CONTACT {
        key PARTNERID    : EPM.BusinessKey not null;
            ADDRESSES: Association to Addresses null;
            EMAILADDRESS: EPM.LString;
            FIRST_NAME   : EPM.SString;
            MID_NAME     : EPM.SString;
            LAST_NAME    : EPM.SString;
            LANGUAGE     : EPM.ABAPLanguage;
            SEX          : SexT;
            WEB_ADDRESS  : EPM.VLString;
    }
    technical configuration {
        partition by Hash (PARTNERID) partitions GET_NUM_SERVERS();
    };
    entity EMAIL {
        key PARTNERID    : EPM.BusinessKey not null;
            EMAILADDRESS: EPM.LString;
    }
    technical configuration {
        partition by Hash (PARTNERID) partitions GET_NUM_SERVERS();
    };
    //END CODE 21DEC2019
    Entity Employees {
        key  EMPLOYEEID: EPM.BusinessKey;
        NAME: NameT null;
        SEX: SexT;
        LANGUAGE: EPM.ABAPLanguage;
        PHONENUMBER: EPM.PhoneT null;
        EMAILADDRESS: EPM.LString;
        LOGINNAME: String(12);
        ADDRESSES: Association to Addresses null;
        VALIDITY: EPM.ValidityT; 
        CURRENCY: EPM.CurrencyT;                
        SALARYAMOUNT: EPM.AmountT;
        ACCOUNTNUMBER: EPM.BusinessKey;
        BANKID: EPM.BusinessKey;
        BANKNAME: EPM.LString;
        EMPLOYEEPICURL: EPM.LString;
        FULLNAME: String(100) = NAME.FIRST || ' ' || NAME.LAST;
    };

    Entity Products {
        key  PRODUCTID: EPM.BusinessKey; 
		TYPECODE: String(2);
		CATEGORY: EPM.SString;
        HISTORY: HistT;
        NAMEID: EPM.BusinessKey;
        DESCID: EPM.BusinessKey;
        SUPPLIER: Association to MD.BusinessPartner;
        TAXTARIFFCODE: Integer;
        QUANTITYUNIT: EPM.UnitT;
        WEIGHTMEASURE: EPM.QuantityT;
        WEIGHTUNIT: EPM.UnitT; 
        CURRENCY: EPM.CurrencyT;
        PRICE: EPM.AmountT;
        PRODUCTPICURL: EPM.LString null;
        WIDTH: EPM.QuantityT;
        DEPTH: EPM.QuantityT;
        HEIGHT: EPM.QuantityT;
        DIMENSIONUNIT: EPM.UnitT;
    } technical configuration {
    	fulltext index FTI_CATEGORY on (CATEGORY) ASYNC SEARCH ONLY off; 
    };

    Entity productLog{
     key PRODUCTID: String(10);
     key LOGID: Integer;
     key DATETIME: UTCDateTime;
     key USERNAME: String(20);
	 LOGTEXT: String(500);
    }; 
 
}; 
